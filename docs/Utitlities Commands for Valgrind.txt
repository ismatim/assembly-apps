Comandos útiles para el TP:
===========================

* Compilamos con información de debugging:

  shell> gcc -Wall -ansi -pedantic -g mzero.c -o mzero

  El flag '-g' agrega información de debugging al ejecutable (mzero), que
  utilizará el valgrind para generar una salida para el cg_annotate tal que este
  pueda mostrar los eventos de acceso a memoria por línea del código C original
  (mzero.c).

* Ejecutamos valgrind:

  shell> valgrind --tool=cachegrind --D1=8192,4,64 ./mzero

  Aquí estamos especificando que queremos correr el módulo cachegrind. Además,
  con la opción D1 estamos especificando el tipo de caché L1 (8192KB, 4 vías, 64
  bytes/línea). Si no se especifica, se utiliza la estructura de cache del
  procesador sobre el cual se está corriendo la simulación.

  La salida es:
  
  ==4184== Cachegrind, an I1/D1/L2 cache profiler.
  ==4184== Copyright (C) 2002-2005, and GNU GPL'd, by Nicholas Nethercote et al.
  ==4184== Using LibVEX rev 1575, a library for dynamic binary translation.
  ==4184== Copyright (C) 2004-2005, and GNU GPL'd, by OpenWorks LLP.
  ==4184== Using valgrind-3.1.1-Debian, a dynamic binary instrumentation framework.
  ==4184== Copyright (C) 2000-2005, and GNU GPL'd, by Julian Seward et al.
  ==4184== For more details, rerun with: -v
  ==4184== 
  --4184-- warning: Pentium 4 with 12 KB micro-op instruction trace cache
  --4184--          Simulating a 16 KB I-cache with 32 B lines
  ==4184== 
  ==4184== I   refs:      159,650
  ==4184== I1  misses:        879
  ==4184== L2i misses:        500
  ==4184== I1  miss rate:    0.55%
  ==4184== L2i miss rate:    0.31%
  ==4184== 
  ==4184== D   refs:       75,879  (56,187 rd + 19,692 wr)
  ==4184== D1  misses:      2,076  ( 1,716 rd +    360 wr)
  ==4184== L2d misses:      1,289  ( 1,008 rd +    281 wr)
  ==4184== D1  miss rate:     2.7% (   3.0%   +    1.8%  )
  ==4184== L2d miss rate:     1.6% (   1.7%   +    1.4%  )
  ==4184== 
  ==4184== L2 refs:         2,955  ( 2,595 rd +    360 wr)
  ==4184== L2 misses:       1,789  ( 1,508 rd +    281 wr)
  ==4184== L2 miss rate:      0.7% (   0.6%   +    1.4%  )
  
  Aquí se muestran las referencias a memoria y a los caché, y los
  misses que se produjeron, pero muestra totales, y en estos se pierden las
  referencias de la parte del programa que nos interesa (es decir, la función
  main).

* El valgind también deja un archivo llamado "cachegrind.out.<pid>", con
  información detallada de la corrida para la utilidad cg_annotate.

  En nuestro ejemplo, el pid (process id) es 4184 (ver salida anterior), con lo
  cual se genera el archivo cachegrind.out.4184.

  Cada corrida dejara un archivo de este tipo, con un pid diferente. Tener en
  cuenta que los pid se reciclan (luego de cierto tiempo, o luego de un reboot),
  con lo cual una corrida determinada puede terminar "pisando" el archivo de
  alguna corrida anterior.

  Cuando queramos ver el detalle, tendremos que hacerlo sobre el archivo
  cachegrind.out.<pid> correspondiente al pid de la corrida que nos interesa.
  
  Para ver el detalle, en nuestro caso:

  shell> cg_annotate --4184 --show=Dr,Dw,D1mr,D1mw mzero.c

  donde:

  --4184: el pid de la corrida en cuestión.
  --show: muestra los eventos indicados
  Dr: accesos de lectura (r) a datos (D)
  Dw: accesos de escritura (w) a datos (D)
  D1mr: misses (m) de lectura (r) a cache L1 (1) de datos (D)
  D1mw: misses (m) de escritura (w) a cache L1 (1) de datos (D)
  mzero.c: fuente sobre el cual hacer las anotaciones.

  Los eventos marcados con '.' indican que no ocurre ese tipo de eventos en la
  función/línea en cuestión.

  La parte de la salida que nos interesa es:
--------------------------------------------------------------------------------
-- User-annotated source: mzero.c
--------------------------------------------------------------------------------
   Dr    Dw D1mr D1mw 

    .     .    .    .  #define M 5
    .     .    .    .  #define N 256
    .     .    .    .  
    .     .    .    .  int main(void)
    0     1    0    0  {
    .     .    .    .   int i,j;
    .     .    .    .   double matriz[M][N];
    .     .    .    .  
   11     1    0    0   for (i=0; i<M; i++)
2,565     5    0    0           for (j=0; j<N; j++)
2,560 1,280    0  160                   matriz[i][j] = 0.0;
    .     .    .    .  
    0     0    0    0   return 0;
    2     0    0    0  }

--------------------------------------------------------------------------------
Dr Dw D1mr D1mw 
--------------------------------------------------------------------------------
 9  7    0   44  percentage of events annotated


Extra
=====

* Compilar con O1, correr el valgrind y luego el cg_annotate.
  Qué paso con los accesos a memoria?
  Cómo haría para evitarlo? (hint: keyword "volatile")
  Qué más se observa en los accesos a memoria y misses?

* Salida assembly: esto no es necesario para realizar el TP, pero puede ser útil
  para desentrañar la salida del cg_annotate en algún caso.
  Podemos detener el proceso de compilación del programa en C en el paso de
  generación del código assembly. Esto se hace utilizando el flag '-S':

  shell> gcc -Wall -ansi -pedantic -g mzero.c -S

  Notar que quitamos la opción '-o mzero', puesto que no estamos generando el
  ejecutable, y el archivo de salida se genera automáticamente bajo el nombre
  mzero.s.

  Aquí, con el flag '-g' obtenemos una salida assembly que contiene la
  información de debugging antes mencionada. Las directivas .loc se utilizan
  para asociar un conjunto de instrucciones assembly a una línea del fuente C.

  Aquí tenemos partes de mzero.s:

  main:
  .LFB2:
          .file 1 "mzero.c"
          .loc 1 5 0
          pushl   %ebp
  ...
          .loc 1 9 0
          movl    $0, -8(%ebp)
          jmp     .L2

  Lo que nos interesa del .loc es el segundo número, que indica la línea C a la
  cual están asociadas las siguientes instrucciones (hasta el siguiente .loc).
  En este caso, vemos que el pushl está asociado a la línea 5 de mzero.c, que
  corresponde a la llave '{' del inicio del main (es decir, la inicialización
  del stack frame se ve asociada al comienzo de la función). De aquí el acceso
  de escritura a memoria (Dw) que se ve en la salida de cg_annotate (es
  justamente el pushl).
 
  El siguiente .loc indica que las siguientes instrucciones assembly están
  asociadas a la línea 9 de mzero.c (for i= ...).

  Los .loc pueden estar distribuidos, es decir, más adelante en el código puede
  volver a aparecer por ejemplo .loc 1 9 0 (indicando que las siguientes
  instrucciones también están asociadas a la línea 9, por ejemplo, podría ser la
  parte que incrementa el índice a la salida del for).

* Manual del valgrind: se puede encontrar online en la web de valgrind, o en el
  filesystem, en el caso de un linux debian en /usr/share/doc/valgrind/html.


